// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
// analyzers Contiene los analizadores usados para la lectura inicial
package analyzers

import __yyfmt__ "fmt"

//line parser.y:3

import "MIA-PROYECTO1/lwh"

var Root lwh.Node

//line parser.y:14
type yySymType struct {
	yys   int
	node  lwh.Node
	token string
}

const PAUSE = 57346
const EXEC = 57347
const PATH = 57348
const HYPHEN = 57349
const ARROW = 57350
const ROUTE = 57351
const MKDISK = 57352
const SIZE = 57353
const UNIT = 57354
const NAME = 57355
const NUMBERN = 57356
const K = 57357
const M = 57358
const ID = 57359
const STRTYPE = 57360
const RMDISK = 57361
const FDISK = 57362
const ADD = 57363
const DELETE = 57364
const FIT = 57365
const TYPE = 57366
const B = 57367
const P = 57368
const E = 57369
const L = 57370
const BF = 57371
const FF = 57372
const WF = 57373
const FAST = 57374
const FULL = 57375
const MOUNT = 57376
const UNMOUNT = 57377
const IDM = 57378
const S_EQUAL = 57379
const COMMENT = 57380

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PAUSE",
	"EXEC",
	"PATH",
	"HYPHEN",
	"ARROW",
	"ROUTE",
	"MKDISK",
	"SIZE",
	"UNIT",
	"NAME",
	"NUMBERN",
	"K",
	"M",
	"ID",
	"STRTYPE",
	"RMDISK",
	"FDISK",
	"ADD",
	"DELETE",
	"FIT",
	"TYPE",
	"B",
	"P",
	"E",
	"L",
	"BF",
	"FF",
	"WF",
	"FAST",
	"FULL",
	"MOUNT",
	"UNMOUNT",
	"IDM",
	"S_EQUAL",
	"COMMENT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:143

const src = `exec path`

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 88

var yyAct = [...]int{
	8, 4, 40, 18, 27, 41, 5, 36, 14, 81,
	23, 26, 25, 37, 38, 6, 7, 42, 75, 76,
	72, 73, 74, 69, 70, 71, 48, 65, 26, 59,
	9, 10, 79, 80, 11, 67, 68, 49, 17, 37,
	38, 15, 58, 57, 78, 66, 33, 28, 34, 63,
	64, 60, 77, 62, 56, 44, 32, 31, 30, 29,
	61, 15, 15, 39, 15, 55, 19, 20, 21, 34,
	54, 53, 52, 51, 50, 47, 46, 45, 43, 3,
	35, 24, 12, 22, 16, 13, 2, 1,
}

var yyPact = [...]int{
	-4, -1000, -4, -1000, 58, 55, 58, 35, -1000, 56,
	-31, -1000, -1000, 58, -1000, 70, 55, -1000, -1000, 69,
	68, 67, 58, -1000, 35, -1000, -1000, -1000, 66, 65,
	64, 63, 62, 57, 46, 56, -1000, -1000, -1000, -31,
	-1000, 21, -1000, 42, -1000, 39, 34, 10, -1000, -1000,
	20, -3, -9, -14, 38, 30, 15, -1000, -1000, -8,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 4, 87, 79, 86, 85, 3, 84, 38, 83,
	81, 12, 80, 7, 63, 2,
}

var yyR1 = [...]int{
	0, 2, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 5, 7, 7, 9, 9, 10, 10,
	12, 12, 14, 14, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	13, 15, 8, 8, 8, 8, 8, 6, 6, 1,
	1,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 2, 2, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 3, 3,
	3,
}

var yyChk = [...]int{
	-1000, -2, -4, -3, 5, 10, 19, 20, 4, 34,
	35, 38, -3, -5, -6, 6, -7, -8, -6, 11,
	12, 13, -9, -6, -10, -11, -6, -1, 12, 24,
	23, 22, 21, 11, 13, -12, -13, -6, -1, -14,
	-15, 36, -6, 8, -8, 8, 8, 8, -6, -11,
	8, 8, 8, 8, 8, 8, 8, -13, -15, 8,
	9, 18, 14, 15, 16, 17, 25, 15, 16, 26,
	27, 28, 29, 30, 31, 32, 33, 14, 14, 17,
	18, 17,
}

var yyDef = [...]int{
	0, -2, 1, 3, 0, 0, 0, 0, 8, 0,
	0, 11, 2, 4, 13, 0, 5, 15, 42, 0,
	0, 0, 6, 17, 7, 19, 24, 25, 0, 0,
	0, 0, 0, 0, 0, 9, 21, 39, 40, 10,
	23, 0, 12, 0, 14, 0, 0, 0, 16, 18,
	0, 0, 0, 0, 0, 0, 0, 20, 22, 0,
	47, 48, 43, 44, 45, 46, 26, 37, 38, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 49,
	50, 41,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:69
		{
			yyVAL.node = yyDollar[1].node
			Root = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:72
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:73
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:76
		{
			yyVAL.node = lwh.NodeF("EXEC", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:77
		{
			yyVAL.node = lwh.NodeF("MKDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:78
		{
			yyVAL.node = lwh.NodeF("RMDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:79
		{
			yyVAL.node = lwh.NodeF("FDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:80
		{
			yyVAL.node = lwh.NodeF("PAUSE", yyDollar[1].token)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:81
		{
			yyVAL.node = lwh.NodeF("MOUNT", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:82
		{
			yyVAL.node = lwh.NodeF("UNMOUNT", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:83
		{
			yyVAL.node = lwh.NodeF("COMENTARIO", yyDollar[1].token)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:86
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:87
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:89
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:90
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:92
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:93
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:96
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:97
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:100
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:101
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:103
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:104
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:107
		{
			yyVAL.node = yyDollar[1].node
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:108
		{
			yyVAL.node = yyDollar[1].node
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:109
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:112
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:113
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:114
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:115
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:116
		{
			yyVAL.node = lwh.NodeF("DELETE", yyDollar[3].token)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:117
		{
			yyVAL.node = lwh.NodeF("DELETE", yyDollar[3].token)
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:118
		{
			yyVAL.node = lwh.NodeF("ADD", yyDollar[3].token)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:119
		{
			yyVAL.node = lwh.NodeF("SIZE", yyDollar[3].token)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:120
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:121
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:123
		{
			yyVAL.node = yyDollar[1].node
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL.node = yyDollar[1].node
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:126
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yyVAL.node = yyDollar[1].node
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:129
		{
			yyVAL.node = lwh.NodeF("SIZE", yyDollar[3].token)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:130
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:131
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:132
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:135
		{
			yyVAL.node = lwh.NodeF("PATH", yyDollar[3].token)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:136
		{
			yyVAL.node = lwh.NodeF("PATH", yyDollar[3].token)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:139
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:140
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	}
	goto yystack /* stack new state and value */
}
