// Code generated by goyacc parser.y. DO NOT EDIT.

//line parser.y:2
// analyzers Contiene los analizadores usados para la lectura inicial
package analyzers

import __yyfmt__ "fmt"

//line parser.y:3

import "MIA-PROYECTO1/lwh"

var Root lwh.Node

//line parser.y:14
type yySymType struct {
	yys   int
	node  lwh.Node
	token string
}

const PAUSE = 57346
const EXEC = 57347
const PATH = 57348
const HYPHEN = 57349
const ARROW = 57350
const ROUTE = 57351
const MKDISK = 57352
const SIZE = 57353
const UNIT = 57354
const NAME = 57355
const NUMBERN = 57356
const K = 57357
const M = 57358
const ID = 57359
const STRTYPE = 57360
const RMDISK = 57361
const FDISK = 57362
const ADD = 57363
const DELETE = 57364
const FIT = 57365
const TYPE = 57366
const B = 57367
const P = 57368
const E = 57369
const L = 57370
const BF = 57371
const FF = 57372
const WF = 57373
const FAST = 57374
const FULL = 57375
const MOUNT = 57376
const UNMOUNT = 57377
const IDM = 57378
const S_EQUAL = 57379
const COMMENT = 57380
const MKFS = 57381
const IDN = 57382
const MKFILE = 57383
const PCONT = 57384
const CONT = 57385
const LOGIN = 57386
const USER = 57387
const PWD = 57388
const LOGOUT = 57389
const MKDIR = 57390
const REP = 57391
const RUTA = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PAUSE",
	"EXEC",
	"PATH",
	"HYPHEN",
	"ARROW",
	"ROUTE",
	"MKDISK",
	"SIZE",
	"UNIT",
	"NAME",
	"NUMBERN",
	"K",
	"M",
	"ID",
	"STRTYPE",
	"RMDISK",
	"FDISK",
	"ADD",
	"DELETE",
	"FIT",
	"TYPE",
	"B",
	"P",
	"E",
	"L",
	"BF",
	"FF",
	"WF",
	"FAST",
	"FULL",
	"MOUNT",
	"UNMOUNT",
	"IDM",
	"S_EQUAL",
	"COMMENT",
	"MKFS",
	"IDN",
	"MKFILE",
	"PCONT",
	"CONT",
	"LOGIN",
	"USER",
	"PWD",
	"LOGOUT",
	"MKDIR",
	"REP",
	"RUTA",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 168

var yyAct = [...]int{
	24, 72, 67, 60, 55, 20, 49, 29, 32, 8,
	4, 46, 33, 43, 21, 5, 61, 68, 73, 45,
	77, 76, 58, 47, 6, 7, 155, 56, 57, 83,
	31, 32, 21, 42, 137, 138, 129, 130, 152, 10,
	9, 153, 21, 11, 12, 46, 15, 64, 74, 13,
	154, 151, 14, 16, 17, 95, 149, 47, 75, 100,
	61, 84, 53, 104, 94, 150, 69, 68, 70, 108,
	147, 52, 73, 110, 51, 92, 62, 23, 63, 65,
	126, 127, 128, 123, 124, 125, 21, 140, 141, 148,
	50, 39, 34, 40, 133, 134, 114, 142, 121, 122,
	79, 38, 37, 36, 35, 115, 145, 146, 120, 144,
	143, 136, 135, 119, 117, 118, 21, 139, 132, 131,
	116, 25, 26, 27, 21, 113, 71, 112, 111, 109,
	107, 40, 106, 105, 103, 102, 101, 99, 98, 97,
	96, 93, 91, 90, 89, 88, 87, 86, 85, 82,
	81, 80, 78, 21, 3, 66, 54, 18, 59, 48,
	41, 44, 30, 28, 22, 19, 2, 1,
}

var yyPact = [...]int{
	5, -1000, 5, -1000, 147, 110, 147, 80, -1000, -23,
	118, -1000, 50, -18, -1000, 36, 26, 8, -1000, 147,
	-1000, 144, 110, -1000, -1000, 143, 142, 141, 147, -1000,
	80, -1000, -1000, -1000, 140, 139, 138, 137, 136, 135,
	134, -23, -1000, 133, 118, -1000, -1000, -1000, 50, -1000,
	132, 131, 130, 129, -18, -1000, 128, 127, 126, 36,
	-1000, -1000, 125, -1000, 124, 122, 26, -1000, -1000, 121,
	-1000, 8, -1000, -1000, 120, 119, 117, -1000, 87, -1000,
	106, 99, 96, -1000, -1000, 83, 57, 51, 4, 105,
	104, 77, -1000, 95, -1000, -1000, 94, 2, 103, 72,
	-1000, 93, 92, 90, -1000, 53, 75, 47, -1000, 34,
	-1000, 21, 32, 9, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 12, 167, 154, 166, 165, 0, 164, 77, 163,
	162, 30, 161, 19, 160, 33, 159, 6, 158, 3,
	156, 4, 155, 2, 126, 1,
}

var yyR1 = [...]int{
	0, 2, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 5,
	7, 7, 9, 9, 10, 10, 12, 12, 14, 14,
	16, 16, 20, 20, 18, 18, 22, 22, 24, 24,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 17, 17, 17, 17, 17,
	17, 17, 21, 21, 21, 21, 19, 19, 19, 19,
	19, 19, 23, 23, 23, 25, 25, 25, 25, 25,
	13, 13, 15, 8, 8, 8, 8, 8, 6, 6,
	1, 1,
}

var yyR2 = [...]int{
	0, 1, 2, 1, 2, 2, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	3, 3, 1, 3, 1, 1, 3, 3, 3, 3,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 3,
	3, 3,
}

var yyChk = [...]int{
	-1000, -2, -4, -3, 5, 10, 19, 20, 4, 35,
	34, 38, 39, 44, 47, 41, 48, 49, -3, -5,
	-6, 6, -7, -8, -6, 11, 12, 13, -9, -6,
	-10, -11, -6, -1, 12, 24, 23, 22, 21, 11,
	13, -14, -15, 36, -12, -13, -6, -1, -16, -17,
	40, 24, 21, 12, -20, -21, 45, 46, 40, -18,
	-19, -6, 40, 42, 11, 43, -22, -23, -6, 40,
	42, -24, -25, -6, 40, 50, 13, -6, 8, -8,
	8, 8, 8, -6, -11, 8, 8, 8, 8, 8,
	8, 8, -15, 8, -13, -17, 8, 8, 8, 8,
	-21, 8, 8, 8, -19, 8, 8, 8, -23, 8,
	-25, 8, 8, 8, 9, 18, 14, 15, 16, 17,
	25, 15, 16, 26, 27, 28, 29, 30, 31, 32,
	33, 14, 14, 17, 18, 17, 17, 32, 33, 14,
	15, 16, 25, 17, 17, 14, 17, 17, 14, 9,
	18, 17, 17, 9, 18, 17,
}

var yyDef = [...]int{
	0, -2, 1, 3, 0, 0, 0, 0, 8, 0,
	0, 11, 0, 0, 14, 0, 0, 0, 2, 4,
	19, 0, 5, 21, 83, 0, 0, 0, 6, 23,
	7, 25, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 9, 29, 0, 10, 27, 80, 81, 12, 31,
	0, 0, 0, 0, 13, 33, 0, 0, 0, 15,
	35, 66, 0, 68, 0, 0, 16, 37, 72, 0,
	74, 17, 39, 75, 0, 0, 0, 18, 0, 20,
	0, 0, 0, 22, 24, 0, 0, 0, 0, 0,
	0, 0, 28, 0, 26, 30, 0, 0, 0, 0,
	32, 0, 0, 0, 34, 0, 0, 0, 36, 0,
	38, 0, 0, 0, 88, 89, 84, 85, 86, 87,
	42, 53, 54, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 90, 91, 82, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 67, 69, 70,
	71, 73, 76, 77, 78, 79,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.node = yyDollar[1].node
			Root = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:105
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:106
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:108
		{
			yyVAL.node = lwh.NodeF("EXEC", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:109
		{
			yyVAL.node = lwh.NodeF("MKDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:110
		{
			yyVAL.node = lwh.NodeF("RMDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:111
		{
			yyVAL.node = lwh.NodeF("FDISK", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:112
		{
			yyVAL.node = lwh.NodeF("PAUSE", yyDollar[1].token)
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:113
		{
			yyVAL.node = lwh.NodeF("UNMOUNT", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:114
		{
			yyVAL.node = lwh.NodeF("MOUNT", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			yyVAL.node = lwh.NodeF("COMENTARIO", yyDollar[1].token)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:116
		{
			yyVAL.node = lwh.NodeF("MKFS", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:117
		{
			yyVAL.node = lwh.NodeF("LOGIN", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			yyVAL.node = lwh.NodeF("LOGOUT", yyDollar[1].token)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:119
		{
			yyVAL.node = lwh.NodeF("MKFILE", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:120
		{
			yyVAL.node = lwh.NodeF("MKDIR", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:121
		{
			yyVAL.node = lwh.NodeF("REP", yyDollar[1].token).Append(yyDollar[2].node)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:123
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:126
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:129
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:130
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:132
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:135
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:136
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:138
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:139
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:141
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:142
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:144
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:145
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:147
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:148
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:150
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:151
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:153
		{
			yyVAL.node = yyDollar[1].node.Append(yyDollar[2].node)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:154
		{
			yyVAL.node.Append(yyDollar[1].node)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:155
		{
			yyVAL.node = yyDollar[1].node
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:156
		{
			yyVAL.node = yyDollar[1].node
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:157
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:159
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:160
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:161
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:162
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:163
		{
			yyVAL.node = lwh.NodeF("FIT", yyDollar[3].token)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:164
		{
			yyVAL.node = lwh.NodeF("DELETE", yyDollar[3].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:165
		{
			yyVAL.node = lwh.NodeF("DELETE", yyDollar[3].token)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:166
		{
			yyVAL.node = lwh.NodeF("ADD", yyDollar[3].token)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:167
		{
			yyVAL.node = lwh.NodeF("SIZE", yyDollar[3].token)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:168
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:169
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:172
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:173
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:174
		{
			yyVAL.node = lwh.NodeF("TYPE", yyDollar[3].token)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			yyVAL.node = lwh.NodeF("ADD", yyDollar[3].token)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			yyVAL.node = lwh.NodeF("USER", yyDollar[3].token)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:182
		{
			yyVAL.node = lwh.NodeF("PWD", yyDollar[3].token)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:183
		{
			yyVAL.node = lwh.NodeF("PWD", yyDollar[3].token)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:184
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:186
		{
			yyVAL.node = yyDollar[1].node
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:188
		{
			yyVAL.node = lwh.NodeF("P", yyDollar[1].token)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:189
		{
			yyVAL.node = lwh.NodeF("SIZE", yyDollar[3].token)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:190
		{
			yyVAL.node = lwh.NodeF("CONT", yyDollar[3].token)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:191
		{
			yyVAL.node = lwh.NodeF("CONT", yyDollar[3].token)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:194
		{
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:196
		{
			yyVAL.node = lwh.NodeF("P", yyDollar[1].token)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:198
		{
			yyVAL.node = yyDollar[1].node
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:199
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:200
		{
			yyVAL.node = lwh.NodeF("RUTA", yyDollar[3].token)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:201
		{
			yyVAL.node = lwh.NodeF("RUTA", yyDollar[3].token)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:202
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:204
		{
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:205
		{
			yyVAL.node = yyDollar[1].node
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:207
		{
			yyVAL.node = lwh.NodeF("ID", yyDollar[3].token)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:209
		{
			yyVAL.node = yyDollar[1].node
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:210
		{
			yyVAL.node = lwh.NodeF("SIZE", yyDollar[3].token)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:211
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			yyVAL.node = lwh.NodeF("UNIT", yyDollar[3].token)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:213
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:215
		{
			yyVAL.node = lwh.NodeF("PATH", yyDollar[3].token)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:216
		{
			yyVAL.node = lwh.NodeF("PATH", yyDollar[3].token)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:218
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:219
		{
			yyVAL.node = lwh.NodeF("NAME", yyDollar[3].token)
		}
	}
	goto yystack /* stack new state and value */
}
