// Code generated by golex. DO NOT EDIT.

// Copyright (c) 2015 The golex Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is an example program using golex run time library.
package analyzers

import (
	"bufio"
	"go/token"
	"io"
	"unicode"

	"modernc.org/golex/lex"
)

// Allocate Character classes anywhere in [0x80, 0xFF].
const (
	classUnicodeLeter = iota + 0x80
	classUnicodeDigit
	classOther
)

type lexer struct {
	*lex.Lexer
}

func rune2Class(r rune) int {
	if r >= 0 && r < 0x80 { // Keep ASCII as it is.
		return int(r)
	}
	if unicode.IsLetter(r) {
		return classUnicodeLeter
	}
	if unicode.IsDigit(r) {
		return classUnicodeDigit
	}
	return classOther
}

func newLexer(src io.Reader, dst io.Writer, fName string) *lexer {
	file := token.NewFileSet().AddFile(fName, -1, 1<<31-1)
	lx, err := lex.New(file, bufio.NewReader(src), lex.RuneClass(rune2Class))
	if err != nil {
		panic(err)
	}
	return &lexer{lx}
}

func (l *lexer) Lex(lval *yySymType) int {
	c := l.Enter()

yystate0:
	yyrule := -1
	_ = yyrule
	c = l.Rule0()

	goto yystart1

yyAction:
	switch yyrule {
	case 1:
		goto yyrule1
	case 2:
		goto yyrule2
	case 3:
		goto yyrule3
	case 4:
		goto yyrule4
	case 5:
		goto yyrule5
	case 6:
		goto yyrule6
	case 7:
		goto yyrule7
	}
yystate1:
	c = l.Next()
yystart1:
	switch {
	default:
		goto yyabort
	case c == 'A' || c == 'D' || c == 'E' || c == 'G' || c == 'H' || c >= 'J' && c <= 'R' || c >= 'T' && c <= 'Z' || c == '_' || c == 'a' || c == 'd' || c == 'e' || c == 'g' || c == 'h' || c >= 'j' && c <= 'r' || c >= 't' && c <= 'z' || c == '\u0080':
		goto yystate3
	case c == 'B' || c == 'b':
		goto yystate4
	case c == 'C' || c == 'c':
		goto yystate8
	case c == 'F' || c == 'f':
		goto yystate12
	case c == 'I' || c == 'i':
		goto yystate17
	case c == 'S' || c == 's':
		goto yystate20
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate2
	}

yystate2:
	c = l.Next()
	yyrule = 1
	l.Mark()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate2
	}

yystate3:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate4:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'O' || c == 'o':
		goto yystate5
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'N' || c >= 'P' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'n' || c >= 'p' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate5:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'O' || c == 'o':
		goto yystate6
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'N' || c >= 'P' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'n' || c >= 'p' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate6:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'L' || c == 'l':
		goto yystate7
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'K' || c >= 'M' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'k' || c >= 'm' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate7:
	c = l.Next()
	yyrule = 5
	l.Mark()
	switch {
	default:
		goto yyrule5
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate8:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'H' || c == 'h':
		goto yystate9
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'G' || c >= 'I' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'g' || c >= 'i' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate9:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'A' || c == 'a':
		goto yystate10
	case c >= '0' && c <= '9' || c >= 'B' && c <= 'Z' || c == '_' || c >= 'b' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate10:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'R' || c == 'r':
		goto yystate11
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Q' || c >= 'S' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'q' || c >= 's' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate11:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate12:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'L' || c == 'l':
		goto yystate13
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'K' || c >= 'M' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'k' || c >= 'm' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate13:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'O' || c == 'o':
		goto yystate14
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'N' || c >= 'P' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'n' || c >= 'p' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate14:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'A' || c == 'a':
		goto yystate15
	case c >= '0' && c <= '9' || c >= 'B' && c <= 'Z' || c == '_' || c >= 'b' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate15:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'T' || c == 't':
		goto yystate16
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'S' || c >= 'U' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate16:
	c = l.Next()
	yyrule = 4
	l.Mark()
	switch {
	default:
		goto yyrule4
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate17:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'N' || c == 'n':
		goto yystate18
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'M' || c >= 'O' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate18:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'T' || c == 't':
		goto yystate19
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'S' || c >= 'U' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate19:
	c = l.Next()
	yyrule = 2
	l.Mark()
	switch {
	default:
		goto yyrule2
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate20:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'T' || c == 't':
		goto yystate21
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'S' || c >= 'U' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate21:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'R' || c == 'r':
		goto yystate22
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Q' || c >= 'S' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'q' || c >= 's' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate22:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'I' || c == 'i':
		goto yystate23
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'H' || c >= 'J' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'h' || c >= 'j' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate23:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'N' || c == 'n':
		goto yystate24
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'M' || c >= 'O' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate24:
	c = l.Next()
	yyrule = 7
	l.Mark()
	switch {
	default:
		goto yyrule7
	case c == 'G' || c == 'g':
		goto yystate25
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'H' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'f' || c >= 'h' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yystate25:
	c = l.Next()
	yyrule = 3
	l.Mark()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate3
	}

yyrule1: // [ \t\r\n]+

	goto yystate0
yyrule2: // int
	{
		lval.token = string(l.TokenBytes(nil))
		return INT
		goto yystate0
	}
yyrule3: // string
	{
		lval.token = string(l.TokenBytes(nil))
		return STRING
		goto yystate0
	}
yyrule4: // float
	{
		lval.token = string(l.TokenBytes(nil))
		return FLOAT
		goto yystate0
	}
yyrule5: // bool
	{
		lval.token = string(l.TokenBytes(nil))
		return BOOL
		goto yystate0
	}
yyrule6: // char
	{
		lval.token = string(l.TokenBytes(nil))
		return CHAR
		goto yystate0
	}
yyrule7: // {identifier}
	if true { // avoid go vet determining the below panic will not be reached
		lval.token = string(l.TokenBytes(nil))
		return IDENT
		goto yystate0
	}
	panic("unreachable")

yyabort: // no lexem recognized
	//
	// silence unused label errors for build and satisfy go vet reachability analysis
	//
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	if c, ok := l.Abort(); ok {
		return int(c)
	}
	goto yyAction
}
